Search.setIndex({"docnames": ["api_reference/data", "api_reference/estimators", "api_reference/index", "api_reference/policies", "api_reference/utils", "examples/ate", "examples/basic", "examples/bound_tightness", "examples/continuous_treatment", "examples/differentiable_policy_learning", "examples/hypothesis_testing", "examples/index", "examples/list_constraints", "examples/list_estimators", "examples/mixed_policy_learning", "examples/model_selection", "examples/nls_data", "index", "installation", "license"], "filenames": ["api_reference/data.rst", "api_reference/estimators.rst", "api_reference/index.rst", "api_reference/policies.rst", "api_reference/utils.rst", "examples/ate.nblink", "examples/basic.nblink", "examples/bound_tightness.nblink", "examples/continuous_treatment.nblink", "examples/differentiable_policy_learning.nblink", "examples/hypothesis_testing.nblink", "examples/index.rst", "examples/list_constraints.nblink", "examples/list_estimators.nblink", "examples/mixed_policy_learning.nblink", "examples/model_selection.nblink", "examples/nls_data.nblink", "index.rst", "installation.rst", "license.rst"], "titles": ["confounding_robust_inference.data", "confounding_robust_inference.estimators", "API Reference", "confounding_robust_inference.policies", "confounding_robust_inference.utils", "Average treatment effect (ATE)", "Basic Example", "Comparison of the tightness of the lower/upper-bounds", "Continuous treatment (i.e. continuous action space)", "Learning differentiable policy", "Hypothesis Testing", "Examples", "List of constraints", "List of estimators", "Learning mixed policy", "Selection of the rank of kernel conditional moment constraints", "National longitudal survery (NLS) dataset", "Welcome to confounding-robust-inference\u2019s documentation!", "Installation", "LICENSE"], "terms": {"class": [0, 1, 3, 4, 10], "basedata": [0, 2], "arg": [0, 1, 3, 15], "kwarg": [0, 1, 3], "sourc": [0, 1, 3, 4], "base": [0, 1], "us": [0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19], "numer": 0, "experi": 0, "evaluate_polici": [0, 6, 7, 8, 10, 12, 13, 15], "polici": [0, 1, 2, 5, 7, 10, 11, 12, 13, 15, 17], "n_mc": [0, 6, 8, 10, 15], "1000": [0, 6, 8, 15], "unbias": 0, "mont": [0, 6, 8, 15], "carlo": [0, 6, 8, 15], "estim": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 17], "valu": [0, 1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 17], "paramet": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "basepolici": [0, 1, 2, 3], "evalu": [0, 1], "int": [0, 1], "The": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "number": [0, 1, 9], "sampl": [0, 1, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "return": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "which": [0, 4], "i": [0, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19], "torch": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "tensor": [0, 1, 3, 4, 6, 8, 15, 16], "differenti": [0, 1, 11], "w": [0, 10], "r": [0, 5, 6, 7, 8, 10, 12, 13, 14, 16], "t": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "type": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "n": [0, 1, 3, 4], "gener": [0, 1, 11], "size": 0, "namedtupl": 0, "contain": 0, "whose": [0, 1], "attribut": 0, "ar": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "y": [0, 1, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "x": [0, 1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "u": [0, 15], "p_t_x": 0, "p_t_xu": 0, "those": 0, "datatupl": [0, 2], "basedatawithlowerbound": [0, 2], "known": [0, 15], "ground": 0, "truth": 0, "lower": [0, 1, 6, 8, 9, 10, 11, 16, 17], "bound": [0, 1, 9, 10, 11, 17], "evaluate_policy_lower_bound": [0, 6, 7, 8, 10, 12, 13, 15], "gamma": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "under": 0, "box": [0, 1], "constraint": [0, 1, 11, 17], "float": [0, 1, 4, 10], "none": [0, 1, 4, 10], "alia": 0, "field": 0, "1": [0, 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17], "3": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "2": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17], "0": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "count": 0, "occurr": 0, "index": 0, "start": 0, "stop": 0, "9223372036854775807": 0, "first": [0, 11, 15], "rais": [0, 6, 8, 16], "valueerror": [0, 6, 8, 16], "present": 0, "4": [0, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "5": [0, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "nlsdatadornguo2022": [0, 2, 16], "nl": [0, 11], "from": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19], "dorn": [0, 1], "guo": [0, 1], "2022": [0, 1], "667": 0, "load": 0, "user": 0, "suppos": 0, "provid": [0, 17, 19], "indic": 0, "thi": [0, 1, 4, 15, 17, 19], "dataset": [0, 11], "syntheticdatabinari": [0, 2, 5, 6, 7, 9, 10, 12, 13, 14, 15], "synthet": 0, "witn": 0, "binari": [0, 3], "action": [0, 1, 3, 4, 11, 19], "space": [0, 1, 3, 4, 11], "similar": 0, "kallu": [0, 3, 11], "zhou": [0, 3, 11], "2018": [0, 3], "For": [0, 1, 15, 17, 18], "we": [0, 1, 6, 8, 15, 16], "know": 0, "analyt": 0, "express": [0, 19], "tan": [0, 1], "": [0, 1, 3, 4, 9, 15], "margin": [0, 1], "sensit": [0, 1, 5, 6, 7, 8, 10, 12, 13, 14, 16, 18], "model": [0, 1, 4, 15, 18], "thu": [0, 1], "can": [0, 1, 6, 8, 15, 18], "test": [0, 9, 11], "consist": 0, "asypmtot": 0, "properti": 0, "see": [0, 1, 3, 17], "syntheticdatacontinu": [0, 2, 8], "continu": [0, 1, 3, 4, 11], "likelihood": [0, 1, 15], "ratio": [0, 1], "syntheticdatakalluszhou2018": [0, 2], "p_ob": [0, 1, 4], "an": [0, 1, 11, 15, 18, 19], "uncertainti": 0, "set": [0, 1, 4], "true": [0, 1, 6, 7, 8, 9, 10, 11, 16], "propens": [0, 1, 2], "p": [0, 14], "actual": 0, "includ": [0, 17, 19], "when": [0, 1, 4], "valid": [0, 1, 11], "given": [0, 1, 3], "syntheticdatakalluszhou2018continu": [0, 2], "baseestim": [1, 2], "fit": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 19], "p_t": [1, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "outcom": 1, "variabl": 1, "It": [1, 15], "must": 1, "shape": [1, 3, 15], "n_sampl": [1, 3], "_default_torch_float_dtyp": [1, 4], "e": [1, 3, 11, 15, 18], "treatment": [1, 3, 11, 16], "context": 1, "n_dim": [1, 3], "nomin": [1, 4], "predict": [1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16], "calcul": [1, 3, 15], "obtain": [1, 18, 19], "method": [1, 4, 15], "basekcmcestim": [1, 2], "predict_du": [1, 15], "dual": [1, 13], "object": 1, "minim": 1, "problem": [1, 13, 15, 18], "individu": 1, "data": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "solv": [1, 13], "dualkcmcestim": [1, 2, 13], "const_typ": [1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16], "d": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "30": [1, 4, 5, 7, 9, 10, 12, 13, 14], "kernel": [1, 11, 17], "condit": [1, 3, 11, 17, 18, 19], "moment": [1, 11, 17], "kcmc": [1, 5, 7, 10, 11, 12, 17], "train": [1, 9], "stochast": [1, 13], "gradient": [1, 4, 9, 13], "descent": [1, 4, 13], "sgd": [1, 9, 11], "though": 1, "qualiti": [1, 18], "solut": [1, 18], "better": [1, 15], "primal": 1, "convex": [1, 17, 18], "optim": [1, 9, 18], "solver": [1, 4, 18], "give": [1, 15], "advantag": 1, "scalabl": 1, "larg": 1, "wide": 1, "adopt": 1, "mean": [1, 3, 10, 15], "mai": [1, 16], "abl": 1, "improv": [1, 3], "admm": 1, "ouyang": 1, "he": [1, 17], "et": [1, 17], "al": [1, 17], "2013": 1, "str": 1, "one": 1, "tan_box": [1, 5, 6, 7, 9, 10, 13, 14, 15, 16], "lr_box": [1, 8], "kl": [1, 11], "inverse_kl": [1, 12], "pearson_chi_squar": [1, 12], "f": [1, 5, 9, 12, 13, 14, 18], "diverg": [1, 11], "satisfi": 1, "qb": [1, 11, 13, 17], "equival": 1, "ipw": [1, 7, 10, 11, 12, 15, 17], "dimens": [1, 15], "low": [1, 5, 7, 10, 12, 14, 15], "rank": [1, 11], "approxim": 1, "quantil": [1, 4, 6, 8, 11, 16, 17], "regress": [1, 4], "optimizer_cl": 1, "optimizer_kwarg": 1, "n_step": 1, "50": [1, 8], "batch_siz": 1, "1024": 1, "seed": [1, 4, 10], "dict": 1, "ani": [1, 3, 15, 19], "dualkcmcpolicylearn": [1, 2, 3, 14], "learner": 1, "mix": [1, 3, 11], "learn": [1, 3, 4, 11, 15], "maxim": 1, "sequenc": [1, 3], "mixtur": 1, "constitut": 1, "predict_ci": [1, 5, 7, 10, 12, 14, 15], "alpha": [1, 4, 5, 7, 10, 12, 14, 15], "05": 1, "confid": [1, 11], "interv": [1, 11], "signific": [1, 4], "level": 1, "tupl": 1, "predict_polici": 1, "mixedpolici": [1, 2, 3], "dualncmcestim": [1, 2, 13], "n_layer": 1, "n_hidden": 1, "64": 1, "neural": [1, 11], "ncmc": [1, 13], "replac": 1, "multipli": [1, 13], "network": [1, 13], "layer": 1, "node": 1, "hidden": 1, "gpkcmcestim": [1, 2, 13], "sigma2": 1, "gaussian": [1, 3, 11], "process": [1, 11], "gp": [1, 13], "ishikawa": [1, 11, 17, 19], "2023": [1, 11, 17, 19], "squared_helling": [1, 12], "neyman_chi_squar": [1, 12], "total_vari": [1, 12], "bayesian": 1, "credibl": 1, "nois": 1, "here": [1, 3, 15], "ridg": 1, "design": 1, "matrix": 1, "psi_": 1, "psi_d": 1, "t_n": 1, "x_n": 1, "follow": [1, 3, 15, 19], "sigma": 1, "empir": [1, 15], "bay": 1, "begin": [1, 15], "eqnarrai": 1, "beta": [1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 15], "sim": 1, "i_d": 1, "psi": 1, "varepsilon": 1, "i_n": 1, "end": [1, 15], "posterior": 1, "highest": 1, "densiti": [1, 3], "mu_": 1, "sigma_": 1, "mathrm": 1, "ci": [1, 10], "_": [1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "leq": 1, "chi": [1, 11], "2_d": 1, "where": 1, "2i_d": 1, "te": 1, "therefor": 1, "0_d": 1, "written": 1, "equat": [1, 15], "hajekestim": [1, 2, 13], "hajek": [1, 11, 17], "ipwestim": [1, 2, 6, 7, 8, 10, 12, 13, 15, 16], "invers": [1, 11, 17], "probabl": [1, 3, 17], "weightn": 1, "kcmcestim": [1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16], "rescale_by_policy_prob": [1, 6, 8, 16], "fals": [1, 4, 6, 10], "bool": 1, "whether": [1, 19], "rescal": 1, "pi": 1, "help": 1, "tighter": 1, "some": 1, "case": [1, 3, 15, 17], "note": 1, "make": 1, "non": [1, 3, 11, 18], "so": [1, 3, 19], "option": [1, 18], "should": 1, "One": 1, "still": [1, 16], "cvxpy": [1, 18], "cvxpylay": 1, "program": [1, 4], "fit_kpca": 1, "princip": 1, "compon": 1, "analysi": [1, 15], "kpca": 1, "orthogon": 1, "function": [1, 13], "If": 1, "call": [1, 18], "befor": 1, "your": 1, "you": 1, "differ": [1, 3, 4], "Its": 1, "dtype": [1, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "consider_second_ord": [1, 10], "consid": [1, 15, 16, 17], "second": [1, 11], "order": [1, 11], "asymptot": [1, 11, 15], "similarli": 1, "gic": [1, 11], "predict_g": [1, 15], "inform": [1, 11], "criterion": [1, 11], "qbestim": [1, 2, 6, 8, 13, 16], "balanc": [1, 6, 8, 11, 16, 17], "A": [1, 3, 4, 17, 18, 19], "argument": 1, "either": 1, "msn": 1, "zsbestim": [1, 2, 6, 9, 13, 16], "use_fractional_program": [1, 6], "zsb": [1, 11], "zhao": 1, "small": 1, "bhattacharya": 1, "2019": 1, "msm": 1, "2006": 1, "linear": [1, 4, 18], "fraction": 1, "doe": 1, "instead": [1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "normal": 1, "take": 1, "more": [1, 4, 15, 18], "primit": 1, "approach": [1, 15], "confounding_robust_infer": [2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17], "atepolici": [2, 3, 5, 16], "gaussianpolici": [2, 3, 8], "logisticpolici": [2, 3, 6, 7, 9, 10, 12, 13, 14, 15], "onehotpolici": [2, 3, 5], "policydiffer": [2, 3], "util": [2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "quantile_regressor": 2, "target_treat": [3, 5, 16], "base_treat": [3, 5, 16], "proper": 3, "effect": [3, 11, 16], "prob": [3, 10], "templat": 3, "confound": [3, 16, 18], "robust": [3, 11, 15, 18], "infer": [3, 18], "allow": 3, "applic": 3, "averag": [3, 11, 16], "ATE": [3, 11], "standard": 3, "deviat": 3, "25": 3, "coeffici": 3, "logist": 3, "bin": 3, "sigmoid": 3, "logit": 3, "g": 3, "discret": 3, "target_polici": 3, "base_polici": [3, 14], "faster": 4, "altern": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "quantileregressor": 4, "scikit": 4, "torchquantileregressor": 4, "sklearn": 4, "linear_model": 4, "reli": 4, "slow": 4, "accur": 4, "cours": 4, "speed": 4, "up": 4, "becom": 4, "10000": 4, "20": [4, 6, 8, 10, 16], "regressor": 4, "exampl": 4, "basic": [4, 11], "interfac": 4, "same": 4, "import": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "numpi": [4, 9], "np": 4, "random": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "randn": [4, 14], "reshap": 4, "tx": 4, "as_tensor": [4, 6, 7, 8, 10, 12, 13, 15], "ty": 4, "quantile_regress": 4, "qr": 4, "fit_intercept": 4, "high": [4, 5, 7, 10, 12, 14, 15, 18], "tqr": 4, "assert": 4, "allclos": 4, "coef_": 4, "atol": 4, "estimate_p_t_binari": 4, "estimate_p_t_bounded_continu": 4, "estimate_p_t_continu": 4, "get_default_torch_dtyp": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "get": [4, 15], "initi": 4, "float64": [4, 6, 8, 15, 16], "set_default_torch_dtyp": 4, "cri": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "matplotlib": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "pyplot": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "plt": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "style": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "seaborn": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "whitegrid": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "cm": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "tab10": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "tmp": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "ipykernel_2392428": 5, "966458967": [5, 12, 14], "py": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "matplotlibdeprecationwarn": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "ship": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "deprec": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "sinc": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "6": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "thei": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "longer": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "correspond": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "howev": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18], "remain": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "avail": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "39": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "v0_8": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "lt": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "gt": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "directli": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "api": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "34": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "setup": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "toi": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "manual_se": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "torch_dtyp": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "policy0": 5, "policy1": [5, 14], "ate_polici": 5, "4000": [5, 7, 10, 12, 13, 14], "def": [5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "plot_bound_tight": [5, 12, 13, 14], "get_lower_bound_ci": [5, 7, 10, 12, 14], "get_upper_bound_ci": [5, 7, 10, 12, 14], "10": [5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "rang": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "11": [5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "lower_bound_ci": [5, 7, 10, 12, 14], "upper_bound_ci": [5, 7, 10, 12, 14], "lower_bound": [5, 7, 10, 12, 13, 14], "l": [5, 7, 10, 12, 14], "h": [5, 7, 10, 12, 14], "upper_bound": [5, 7, 10, 12, 13, 14], "lower_bound_cis_high": [5, 7, 10, 12, 14], "upper_bound_cis_high": [5, 7, 10, 12, 14], "lower_bound_cis_low": [5, 7, 10, 12, 14], "upper_bound_cis_low": [5, 7, 10, 12, 14], "lower_lin": [5, 7, 10, 12, 14], "plot": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "color": [5, 6, 7, 8, 10, 12, 13, 14, 15, 16], "upper_lin": [5, 7, 10, 12, 14], "lower_band": [5, 7, 10, 12, 14], "fill_between": [5, 7, 10, 12, 14], "upper_band": [5, 7, 10, 12, 14], "legend": [5, 6, 7, 8, 9, 10, 12, 14, 15, 16], "xlabel": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "ylabel": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "isinst": 5, "savefig": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "fig": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "test_ate_": 5, "__class__": 5, "__name__": 5, "pdf": [5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16], "els": [5, 6, 8, 14, 16], "8": [5, 6, 7, 8, 9, 10, 12, 13, 15], "misc": [6, 16], "normalize_p_t": [6, 16], "ipykernel_1106158": 6, "711566762": [6, 7, 8, 9, 13, 15], "8496": 6, "also": [6, 8, 15], "comput": [6, 8, 15], "theoret": [6, 8, 15], "distribut": [6, 8, 15, 19], "100000": [6, 8, 15], "6557": 6, "6562": 6, "7": [6, 7, 9, 10, 12, 13, 14, 15, 16], "3339": 6, "get_bound": [6, 8, 16], "estimator_typ": [6, 8, 16], "direct": [6, 8, 16], "elif": [6, 8, 16], "upper": [6, 8, 11, 16, 17], "lower_bounds_kcmc": [6, 8, 16], "upper_bounds_kcmc": [6, 8, 16], "lower_bounds_zsb": [6, 16], "upper_bounds_zsb": [6, 16], "lower_bounds_qb": [6, 8, 16], "upper_bounds_qb": [6, 8, 16], "9": [6, 8, 9, 10, 12, 13, 15], "lower_line_kcmc": [6, 8, 16], "upper_line_kcmc": [6, 8, 16], "lower_line_zsb": [6, 16], "upper_line_zsb": [6, 16], "lower_line_qb": [6, 8, 16], "upper_line_qb": [6, 8, 16], "loc": [6, 8, 16], "left": [6, 8, 16], "basic_kcmc_vs_zsb_vs_qb": 6, "ipykernel_3727720": 7, "true_ipw": [7, 10, 12, 13, 15], "true_lower_bound": [7, 10, 12, 13, 15], "bia": [7, 10, 12, 13, 15], "remove_finite_sample_bia": [7, 12, 13, 15], "est": [7, 10, 12, 13, 15], "true_lin": [7, 10], "c": [7, 10, 19], "bound_tight": 7, "ipykernel_1106759": 8, "9869": 8, "7728": 8, "5561": 8, "4270": 8, "continuous_treatment_kcmc_vs_qb": 8, "tqdm": [9, 10], "ipykernel_82455": 9, "zero": 9, "requires_grad": 9, "y_train": 9, "t_train": 9, "x_train": 9, "p_t_train": 9, "2000": [9, 10], "y_test": 9, "t_test": 9, "x_test": 9, "p_t_test": 9, "lower_bounds_test": 9, "lower_bounds_train": 9, "n_iter": 9, "300": 9, "lr": 9, "param": 9, "pbar": 9, "estimator_test": 9, "lb_test": 9, "append": [9, 14, 15], "estimator_train": 9, "lb_train": 9, "backward": 9, "step": [9, 15], "zero_grad": 9, "set_descript": 9, "ttest": 9, "343570950206083": 9, "281132347233938": 9, "100": [9, 10], "18": 9, "00": [9, 10], "06": [9, 12], "ylim": [9, 10], "ascent": 9, "differentiable_policy_learning_kcmc": 9, "reset": 9, "274150236599044": 9, "220282718085993": 9, "01": [9, 10, 12], "37": 9, "09it": 9, "differentiable_policy_learning_zsb": 9, "warn": [10, 15], "ipykernel_82724": 10, "2912862134": 10, "100000000": 10, "hypothesis_testing_first_ord": 10, "get_lower_bound_and_ci": 10, "mid": 10, "get_upper_bound_and_ci": 10, "catch_warn": [10, 15], "simplefilt": [10, 15], "ignor": [10, 15], "just": [10, 15], "lower_bound_and_ci": 10, "upper_bound_and_ci": 10, "m": [10, 15], "hypothesis_testing_second_ord": 10, "12": [10, 12, 13, 15], "dataclass": 10, "generate_ci": 10, "low_first": 10, "high_first": 10, "low_second": 10, "high_second": 10, "13": [10, 15], "n_sim": 10, "54": 10, "03": [10, 12], "42": 10, "14": [10, 15], "mesh": 10, "linspac": 10, "1001": 10, "mesh_in_ci_first": 10, "concat": 10, "logical_and": 10, "axi": 10, "mesh_in_ci_second": 10, "acceptance_rate_first": 10, "acceptance_rate_second": 10, "15": [10, 15], "jitter": 10, "clip": 10, "line_first": 10, "line_second": 10, "band_first": 10, "band_second": 10, "vline": 10, "o": 10, "correct": 10, "ytick": 10, "hypothesis_testing_acceptance_r": 10, "19": 10, "xlim": 10, "hypothesis_testing_acceptance_rate_zoom": 10, "visual": 11, "nation": 11, "longitud": 11, "surveri": 11, "comparison": 11, "tight": 11, "niao": [11, 17], "2020": 11, "select": 11, "cross": 11, "hypothesi": 11, "accept": 11, "rate": 11, "null": 11, "list": [11, 15, 17], "cmc": 11, "squar": 11, "helling": 11, "distanc": 11, "peason": 11, "neyman": 11, "total": 11, "variat": 11, "ipykernel_2664440": 12, "max_gamma": 12, "02": 12, "04": 12, "015": 12, "list_constraints_": 12, "ipykernel_2862243": 13, "estimator_factori": 13, "estimator_nam": 13, "get_lower_bound": 13, "get_upper_bound": 13, "list_estimators_": 13, "ha": 13, "parametr": 13, "ipykernel_2659232": 14, "beta1": 14, "beta2": 14, "beta3": 14, "policy2": 14, "policy3": 14, "legend_target": 14, "policies_list": 14, "enumer": 14, "len": [14, 15], "grei": 14, "mixed_policy_learn": 14, "most": 15, "becaus": 15, "too": 15, "would": 15, "pessimist": 15, "worst": [15, 17], "while": 15, "overli": 15, "optimist": 15, "chosen": 15, "purpos": [15, 19], "reformul": 15, "onc": 15, "have": 15, "hat": 15, "theta": 15, "min_": 15, "mathbb": 15, "_n": 15, "ell_": 15, "z": 15, "appli": 15, "statist": [15, 17], "machin": 15, "notebook": 15, "two": 15, "ipykernel_82642": 15, "let": 15, "compar": 15, "simul": 15, "clearli": 15, "observ": 15, "higher": 15, "complex": 15, "result": 15, "possibli": 15, "due": 15, "overfit": 15, "d_min": 15, "d_max": 15, "200": 15, "dim": 15, "kcmc_list": 15, "0x7fbb3cdaeec0": 15, "popul": 15, "risk": 15, "version": [15, 17], "aic": 15, "akaik": 15, "maximum": 15, "its": [15, 17], "deriv": 15, "depend": 15, "gic_list": 15, "0x7fbb2bf6b730": 15, "6108": 15, "k": 15, "is_train": 15, "arang": 15, "is_valid": 15, "data_": 15, "data_train": 15, "map": 15, "lambda": 15, "5616": 15, "data_valid": 15, "7972": 15, "16": 15, "0447": 15, "0784": 15, "17": 15, "cv": 15, "fold": 15, "score": 15, "sum": 15, "cv_list": 15, "23": 15, "criteria": 15, "model_select": 15, "ipykernel_1094965": 16, "1438594505": 16, "union": 16, "membership": 16, "might": 16, "posit": 16, "impact": 16, "wage": 16, "2271": 16, "even": 16, "possibl": 16, "affect": 16, "1085": 16, "nls_data_kcmc_vs_zsb_vs_qb": 16, "packag": [17, 18], "implement": 17, "discuss": 17, "preliminari": 17, "These": 17, "robustifi": 17, "classic": 17, "weight": 17, "support": 17, "exhaus": 17, "kei": [17, 19], "intern": 17, "confer": 17, "artifici": 17, "intellig": 17, "pmlr": 17, "naio": 17, "takafumi": 17, "kanamori": 17, "framework": 17, "arxiv": 17, "preprint": 17, "2309": 17, "12450": 17, "To": 18, "develop": 18, "download": 18, "repositori": 18, "edit": 18, "git": 18, "clone": 18, "github": 18, "com": 18, "kstoneriv3": 18, "cd": 18, "pip": 18, "commerci": 18, "mosek": 18, "backend": 18, "found": 18, "tend": 18, "produc": 18, "associ": [18, 19], "peopl": 18, "academia": 18, "offer": 18, "free": [18, 19], "academ": 18, "licens": 18, "trial": 18, "complet": 18, "reason": 18, "usual": 18, "without": [18, 19], "mit": 19, "copyright": 19, "permiss": 19, "herebi": 19, "grant": 19, "charg": 19, "person": 19, "copi": 19, "softwar": 19, "document": 19, "file": 19, "deal": 19, "restrict": 19, "limit": 19, "right": 19, "modifi": 19, "merg": 19, "publish": 19, "sublicens": 19, "sell": 19, "permit": 19, "whom": 19, "furnish": 19, "do": 19, "subject": 19, "abov": 19, "notic": 19, "shall": 19, "all": 19, "substanti": 19, "portion": 19, "THE": 19, "AS": 19, "warranti": 19, "OF": 19, "kind": 19, "OR": 19, "impli": 19, "BUT": 19, "NOT": 19, "TO": 19, "merchant": 19, "FOR": 19, "particular": 19, "AND": 19, "noninfring": 19, "IN": 19, "NO": 19, "event": 19, "author": 19, "holder": 19, "BE": 19, "liabl": 19, "claim": 19, "damag": 19, "other": 19, "liabil": 19, "contract": 19, "tort": 19, "otherwis": 19, "aris": 19, "out": 19, "connect": 19, "WITH": 19}, "objects": {"confounding_robust_inference": [[0, 0, 0, "-", "data"], [1, 0, 0, "-", "estimators"], [3, 0, 0, "-", "policies"], [4, 0, 0, "-", "utils"]], "confounding_robust_inference.data": [[0, 1, 1, "", "BaseData"], [0, 1, 1, "", "BaseDataWithLowerBound"], [0, 1, 1, "", "DataTuple"], [0, 1, 1, "", "NLSDataDornGuo2022"], [0, 1, 1, "", "SyntheticDataBinary"], [0, 1, 1, "", "SyntheticDataContinuous"], [0, 1, 1, "", "SyntheticDataKallusZhou2018"], [0, 1, 1, "", "SyntheticDataKallusZhou2018Continuous"]], "confounding_robust_inference.data.BaseData": [[0, 2, 1, "", "evaluate_policy"], [0, 2, 1, "", "sample"]], "confounding_robust_inference.data.BaseDataWithLowerBound": [[0, 2, 1, "", "evaluate_policy"], [0, 2, 1, "", "evaluate_policy_lower_bound"], [0, 2, 1, "", "sample"]], "confounding_robust_inference.data.DataTuple": [[0, 3, 1, "", "T"], [0, 3, 1, "", "U"], [0, 3, 1, "", "X"], [0, 3, 1, "", "Y"], [0, 2, 1, "", "count"], [0, 2, 1, "", "index"], [0, 3, 1, "", "p_t_x"], [0, 3, 1, "", "p_t_xu"]], "confounding_robust_inference.data.NLSDataDornGuo2022": [[0, 2, 1, "", "sample"]], "confounding_robust_inference.data.SyntheticDataBinary": [[0, 2, 1, "", "evaluate_policy"], [0, 2, 1, "", "evaluate_policy_lower_bound"], [0, 2, 1, "", "sample"]], "confounding_robust_inference.data.SyntheticDataContinuous": [[0, 2, 1, "", "evaluate_policy"], [0, 2, 1, "", "evaluate_policy_lower_bound"], [0, 2, 1, "", "sample"]], "confounding_robust_inference.data.SyntheticDataKallusZhou2018": [[0, 2, 1, "", "evaluate_policy"], [0, 2, 1, "", "sample"]], "confounding_robust_inference.data.SyntheticDataKallusZhou2018Continuous": [[0, 2, 1, "", "evaluate_policy"], [0, 2, 1, "", "sample"]], "confounding_robust_inference.estimators": [[1, 1, 1, "", "BaseEstimator"], [1, 1, 1, "", "BaseKCMCEstimator"], [1, 1, 1, "", "DualKCMCEstimator"], [1, 1, 1, "", "DualKCMCPolicyLearner"], [1, 1, 1, "", "DualNCMCEstimator"], [1, 1, 1, "", "GPKCMCEstimator"], [1, 1, 1, "", "HajekEstimator"], [1, 1, 1, "", "IPWEstimator"], [1, 1, 1, "", "KCMCEstimator"], [1, 1, 1, "", "QBEstimator"], [1, 1, 1, "", "ZSBEstimator"]], "confounding_robust_inference.estimators.BaseEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"]], "confounding_robust_inference.estimators.BaseKCMCEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "predict_dual"]], "confounding_robust_inference.estimators.DualKCMCEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "predict_dual"]], "confounding_robust_inference.estimators.DualKCMCPolicyLearner": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "predict_ci"], [1, 2, 1, "", "predict_policy"]], "confounding_robust_inference.estimators.DualNCMCEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"]], "confounding_robust_inference.estimators.GPKCMCEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "predict_dual"]], "confounding_robust_inference.estimators.HajekEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"]], "confounding_robust_inference.estimators.IPWEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"]], "confounding_robust_inference.estimators.KCMCEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "fit_kpca"], [1, 2, 1, "", "predict"], [1, 2, 1, "", "predict_ci"], [1, 2, 1, "", "predict_dual"], [1, 2, 1, "", "predict_gic"]], "confounding_robust_inference.estimators.QBEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"]], "confounding_robust_inference.estimators.ZSBEstimator": [[1, 2, 1, "", "fit"], [1, 2, 1, "", "predict"]], "confounding_robust_inference.policies": [[3, 1, 1, "", "ATEPolicy"], [3, 1, 1, "", "BasePolicy"], [3, 1, 1, "", "GaussianPolicy"], [3, 1, 1, "", "LogisticPolicy"], [3, 1, 1, "", "MixedPolicy"], [3, 1, 1, "", "OnehotPolicy"], [3, 1, 1, "", "PolicyDifference"]], "confounding_robust_inference.policies.ATEPolicy": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.policies.BasePolicy": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.policies.GaussianPolicy": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.policies.LogisticPolicy": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.policies.MixedPolicy": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.policies.OnehotPolicy": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.policies.PolicyDifference": [[3, 2, 1, "", "prob"], [3, 2, 1, "", "sample"]], "confounding_robust_inference.utils": [[4, 0, 0, "-", "propensity"], [4, 0, 0, "-", "quantile_regression"], [4, 0, 0, "-", "types"]], "confounding_robust_inference.utils.propensity": [[4, 4, 1, "", "estimate_p_t_binary"], [4, 4, 1, "", "estimate_p_t_bounded_continuous"], [4, 4, 1, "", "estimate_p_t_continuous"]], "confounding_robust_inference.utils.quantile_regression": [[4, 1, 1, "", "TorchQuantileRegressor"]], "confounding_robust_inference.utils.types": [[4, 4, 1, "", "get_default_torch_dtype"], [4, 4, 1, "", "set_default_torch_dtype"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"confounding_robust_infer": [0, 1, 3, 4], "data": 0, "estim": [1, 6, 8, 9, 13, 16], "api": 2, "refer": 2, "polici": [3, 6, 8, 9, 14, 16], "util": 4, "quantile_regressor": 4, "propens": 4, "type": 4, "averag": 5, "treatment": [5, 8], "effect": 5, "ATE": 5, "basic": 6, "exampl": [6, 11], "non": [6, 8, 16], "robust": [6, 8, 16, 17], "valu": [6, 8, 16], "visual": [6, 8, 16], "bound": [6, 7, 8, 15, 16], "kcmc": [6, 8, 9, 13, 15, 16], "zsb": [6, 9, 13, 16], "qb": [6, 8, 16], "comparison": 7, "tight": 7, "lower": [7, 15], "upper": 7, "continu": 8, "i": 8, "e": 8, "action": 8, "space": 8, "learn": [9, 14], "differenti": 9, "ishikawa": 9, "niao": 9, "2023": 9, "kallu": 9, "zhou": 9, "2020": 9, "hypothesi": 10, "test": 10, "confid": 10, "interv": 10, "first": 10, "order": 10, "asymptot": 10, "second": 10, "accept": 10, "rate": 10, "null": 10, "us": 10, "an": 10, "list": [12, 13], "constraint": [12, 15], "kl": 12, "diverg": 12, "invers": 12, "squar": 12, "helling": 12, "distanc": 12, "peason": 12, "chi": 12, "neyman": 12, "total": 12, "variat": 12, "ipw": 13, "hajek": 13, "sgd": 13, "neural": 13, "cmc": 13, "gaussian": 13, "process": 13, "quantil": 13, "balanc": 13, "mix": 14, "select": 15, "rank": 15, "kernel": 15, "condit": 15, "moment": 15, "true": 15, "gener": 15, "inform": 15, "criterion": 15, "gic": 15, "cross": 15, "valid": 15, "nation": 16, "longitud": 16, "surveri": 16, "nl": 16, "dataset": 16, "welcom": 17, "confound": 17, "infer": 17, "": 17, "document": 17, "introduct": 17, "referec": 17, "instal": 18, "licens": 19}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"confounding_robust_inference.data": [[0, "module-confounding_robust_inference.data"]], "confounding_robust_inference.estimators": [[1, "module-confounding_robust_inference.estimators"]], "API Reference": [[2, "api-reference"]], "confounding_robust_inference.policies": [[3, "module-confounding_robust_inference.policies"]], "confounding_robust_inference.utils": [[4, "confounding-robust-inference-utils"]], "confounding_robust_inference.utils.quantile_regressor": [[4, "confounding-robust-inference-utils-quantile-regressor"]], "confounding_robust_inference.utils.propensity": [[4, "confounding-robust-inference-utils-propensity"]], "confounding_robust_inference.utils.types": [[4, "module-confounding_robust_inference.utils.types"]], "Average treatment effect (ATE)": [[5, "Average-treatment-effect-(ATE)"]], "Basic Example": [[6, "Basic-Example"]], "Non-robust policy value": [[6, "Non-robust-policy-value"], [8, "Non-robust-policy-value"], [16, "Non-robust-policy-value"]], "Robust policy value": [[6, "Robust-policy-value"], [8, "Robust-policy-value"], [16, "Robust-policy-value"]], "Visualize the bounds by KCMC, ZSB, and QB estimators": [[6, "Visualize-the-bounds-by-KCMC,-ZSB,-and-QB-estimators"], [16, "Visualize-the-bounds-by-KCMC,-ZSB,-and-QB-estimators"]], "Comparison of the tightness of the lower/upper-bounds": [[7, "Comparison-of-the-tightness-of-the-lower/upper-bounds"]], "Continuous treatment (i.e. continuous action space)": [[8, "Continuous-treatment-(i.e.-continuous-action-space)"]], "Visualize the bounds by KCMC and QB estimators": [[8, "Visualize-the-bounds-by-KCMC-and-QB-estimators"]], "Learning differentiable policy": [[9, "Learning-differentiable-policy"]], "Policy Learning with KCMC Estimator (Ishikawa and Niao 2023)": [[9, "Policy-Learning-with-KCMC-Estimator-(Ishikawa-and-Niao-2023)"]], "Policy Learning with ZSB Estimator (Kallus and Zhou 2020)": [[9, "Policy-Learning-with-ZSB-Estimator-(Kallus-and-Zhou-2020)"]], "Hypothesis Testing": [[10, "Hypothesis-Testing"]], "Confidence intervals with first order asymptotics": [[10, "Confidence-intervals-with-first-order-asymptotics"]], "Confidence intervals with second order asymptotics": [[10, "Confidence-intervals-with-second-order-asymptotics"]], "Acceptance Rate of Null Hypothesis using tests using first ans second order asymptotics": [[10, "Acceptance-Rate-of-Null-Hypothesis-using-tests-using-first-ans-second-order-asymptotics"]], "Examples": [[11, "examples"]], "List of constraints": [[12, "List-of-constraints"]], "KL divergence": [[12, "KL-divergence"]], "Inverse KL divergence": [[12, "Inverse-KL-divergence"]], "Squared Hellinger distance": [[12, "Squared-Hellinger-distance"]], "Peason chi squared divergence": [[12, "Peason-chi-squared-divergence"]], "Neyman chi squared divergence": [[12, "Neyman-chi-squared-divergence"]], "Total variation distance": [[12, "Total-variation-distance"]], "List of estimators": [[13, "List-of-estimators"]], "IPW estimator": [[13, "IPW-estimator"]], "Hajek estimator": [[13, "Hajek-estimator"]], "ZSB estimator": [[13, "ZSB-estimator"]], "KCMC estimator": [[13, "KCMC-estimator"]], "KCMC estimator with SGD": [[13, "KCMC-estimator-with-SGD"]], "Neural CMC estimator": [[13, "Neural-CMC-estimator"]], "Gaussian process KCMC estimator": [[13, "Gaussian-process-KCMC-estimator"]], "Quantile Balancing Estimator": [[13, "Quantile-Balancing-Estimator"]], "Learning mixed policy": [[14, "Learning-mixed-policy"]], "Selection of the rank of kernel conditional moment constraints": [[15, "Selection-of-the-rank-of-kernel-conditional-moment-constraints"]], "True lower bound and KCMC lower bound": [[15, "True-lower-bound-and-KCMC-lower-bound"]], "Generalized Information Criterion (GIC)": [[15, "Generalized-Information-Criterion-(GIC)"]], "Cross-Validation": [[15, "Cross-Validation"]], "National longitudal survery (NLS) dataset": [[16, "National-longitudal-survery-(NLS)-dataset"]], "Welcome to confounding-robust-inference\u2019s documentation!": [[17, "welcome-to-confounding-robust-inference-s-documentation"]], "Introduction": [[17, "introduction"]], "Referece": [[17, "referece"]], "Installation": [[18, "installation"]], "LICENSE": [[19, "license"]]}, "indexentries": {"basedata (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.BaseData"]], "basedatawithlowerbound (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.BaseDataWithLowerBound"]], "datatuple (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.DataTuple"]], "nlsdatadornguo2022 (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.NLSDataDornGuo2022"]], "syntheticdatabinary (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.SyntheticDataBinary"]], "syntheticdatacontinuous (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.SyntheticDataContinuous"]], "syntheticdatakalluszhou2018 (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.SyntheticDataKallusZhou2018"]], "syntheticdatakalluszhou2018continuous (class in confounding_robust_inference.data)": [[0, "confounding_robust_inference.data.SyntheticDataKallusZhou2018Continuous"]], "t (datatuple attribute)": [[0, "confounding_robust_inference.data.DataTuple.T"]], "u (datatuple attribute)": [[0, "confounding_robust_inference.data.DataTuple.U"]], "x (datatuple attribute)": [[0, "confounding_robust_inference.data.DataTuple.X"]], "y (datatuple attribute)": [[0, "confounding_robust_inference.data.DataTuple.Y"]], "confounding_robust_inference.data": [[0, "module-confounding_robust_inference.data"]], "count() (datatuple method)": [[0, "confounding_robust_inference.data.DataTuple.count"]], "evaluate_policy() (basedata method)": [[0, "confounding_robust_inference.data.BaseData.evaluate_policy"]], "evaluate_policy() (basedatawithlowerbound method)": [[0, "confounding_robust_inference.data.BaseDataWithLowerBound.evaluate_policy"]], "evaluate_policy() (syntheticdatabinary method)": [[0, "confounding_robust_inference.data.SyntheticDataBinary.evaluate_policy"]], "evaluate_policy() (syntheticdatacontinuous method)": [[0, "confounding_robust_inference.data.SyntheticDataContinuous.evaluate_policy"]], "evaluate_policy() (syntheticdatakalluszhou2018 method)": [[0, "confounding_robust_inference.data.SyntheticDataKallusZhou2018.evaluate_policy"]], "evaluate_policy() (syntheticdatakalluszhou2018continuous method)": [[0, "confounding_robust_inference.data.SyntheticDataKallusZhou2018Continuous.evaluate_policy"]], "evaluate_policy_lower_bound() (basedatawithlowerbound method)": [[0, "confounding_robust_inference.data.BaseDataWithLowerBound.evaluate_policy_lower_bound"]], "evaluate_policy_lower_bound() (syntheticdatabinary method)": [[0, "confounding_robust_inference.data.SyntheticDataBinary.evaluate_policy_lower_bound"]], "evaluate_policy_lower_bound() (syntheticdatacontinuous method)": [[0, "confounding_robust_inference.data.SyntheticDataContinuous.evaluate_policy_lower_bound"]], "index() (datatuple method)": [[0, "confounding_robust_inference.data.DataTuple.index"]], "module": [[0, "module-confounding_robust_inference.data"], [1, "module-confounding_robust_inference.estimators"], [3, "module-confounding_robust_inference.policies"], [4, "module-confounding_robust_inference.utils"], [4, "module-confounding_robust_inference.utils.propensity"], [4, "module-confounding_robust_inference.utils.quantile_regression"], [4, "module-confounding_robust_inference.utils.types"]], "p_t_x (datatuple attribute)": [[0, "confounding_robust_inference.data.DataTuple.p_t_x"]], "p_t_xu (datatuple attribute)": [[0, "confounding_robust_inference.data.DataTuple.p_t_xu"]], "sample() (basedata method)": [[0, "confounding_robust_inference.data.BaseData.sample"]], "sample() (basedatawithlowerbound method)": [[0, "confounding_robust_inference.data.BaseDataWithLowerBound.sample"]], "sample() (nlsdatadornguo2022 method)": [[0, "confounding_robust_inference.data.NLSDataDornGuo2022.sample"]], "sample() (syntheticdatabinary method)": [[0, "confounding_robust_inference.data.SyntheticDataBinary.sample"]], "sample() (syntheticdatacontinuous method)": [[0, "confounding_robust_inference.data.SyntheticDataContinuous.sample"]], "sample() (syntheticdatakalluszhou2018 method)": [[0, "confounding_robust_inference.data.SyntheticDataKallusZhou2018.sample"]], "sample() (syntheticdatakalluszhou2018continuous method)": [[0, "confounding_robust_inference.data.SyntheticDataKallusZhou2018Continuous.sample"]], "baseestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.BaseEstimator"]], "basekcmcestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.BaseKCMCEstimator"]], "dualkcmcestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.DualKCMCEstimator"]], "dualkcmcpolicylearner (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.DualKCMCPolicyLearner"]], "dualncmcestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.DualNCMCEstimator"]], "gpkcmcestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.GPKCMCEstimator"]], "hajekestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.HajekEstimator"]], "ipwestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.IPWEstimator"]], "kcmcestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.KCMCEstimator"]], "qbestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.QBEstimator"]], "zsbestimator (class in confounding_robust_inference.estimators)": [[1, "confounding_robust_inference.estimators.ZSBEstimator"]], "confounding_robust_inference.estimators": [[1, "module-confounding_robust_inference.estimators"]], "fit() (baseestimator method)": [[1, "confounding_robust_inference.estimators.BaseEstimator.fit"]], "fit() (basekcmcestimator method)": [[1, "confounding_robust_inference.estimators.BaseKCMCEstimator.fit"]], "fit() (dualkcmcestimator method)": [[1, "confounding_robust_inference.estimators.DualKCMCEstimator.fit"]], "fit() (dualkcmcpolicylearner method)": [[1, "confounding_robust_inference.estimators.DualKCMCPolicyLearner.fit"]], "fit() (dualncmcestimator method)": [[1, "confounding_robust_inference.estimators.DualNCMCEstimator.fit"]], "fit() (gpkcmcestimator method)": [[1, "confounding_robust_inference.estimators.GPKCMCEstimator.fit"]], "fit() (hajekestimator method)": [[1, "confounding_robust_inference.estimators.HajekEstimator.fit"]], "fit() (ipwestimator method)": [[1, "confounding_robust_inference.estimators.IPWEstimator.fit"]], "fit() (kcmcestimator method)": [[1, "confounding_robust_inference.estimators.KCMCEstimator.fit"]], "fit() (qbestimator method)": [[1, "confounding_robust_inference.estimators.QBEstimator.fit"]], "fit() (zsbestimator method)": [[1, "confounding_robust_inference.estimators.ZSBEstimator.fit"]], "fit_kpca() (kcmcestimator method)": [[1, "confounding_robust_inference.estimators.KCMCEstimator.fit_kpca"]], "predict() (baseestimator method)": [[1, "confounding_robust_inference.estimators.BaseEstimator.predict"]], "predict() (basekcmcestimator method)": [[1, "confounding_robust_inference.estimators.BaseKCMCEstimator.predict"]], "predict() (dualkcmcestimator method)": [[1, "confounding_robust_inference.estimators.DualKCMCEstimator.predict"]], "predict() (dualkcmcpolicylearner method)": [[1, "confounding_robust_inference.estimators.DualKCMCPolicyLearner.predict"]], "predict() (dualncmcestimator method)": [[1, "confounding_robust_inference.estimators.DualNCMCEstimator.predict"]], "predict() (gpkcmcestimator method)": [[1, "confounding_robust_inference.estimators.GPKCMCEstimator.predict"]], "predict() (hajekestimator method)": [[1, "confounding_robust_inference.estimators.HajekEstimator.predict"]], "predict() (ipwestimator method)": [[1, "confounding_robust_inference.estimators.IPWEstimator.predict"]], "predict() (kcmcestimator method)": [[1, "confounding_robust_inference.estimators.KCMCEstimator.predict"]], "predict() (qbestimator method)": [[1, "confounding_robust_inference.estimators.QBEstimator.predict"]], "predict() (zsbestimator method)": [[1, "confounding_robust_inference.estimators.ZSBEstimator.predict"]], "predict_ci() (dualkcmcpolicylearner method)": [[1, "confounding_robust_inference.estimators.DualKCMCPolicyLearner.predict_ci"]], "predict_ci() (kcmcestimator method)": [[1, "confounding_robust_inference.estimators.KCMCEstimator.predict_ci"]], "predict_dual() (basekcmcestimator method)": [[1, "confounding_robust_inference.estimators.BaseKCMCEstimator.predict_dual"]], "predict_dual() (dualkcmcestimator method)": [[1, "confounding_robust_inference.estimators.DualKCMCEstimator.predict_dual"]], "predict_dual() (gpkcmcestimator method)": [[1, "confounding_robust_inference.estimators.GPKCMCEstimator.predict_dual"]], "predict_dual() (kcmcestimator method)": [[1, "confounding_robust_inference.estimators.KCMCEstimator.predict_dual"]], "predict_gic() (kcmcestimator method)": [[1, "confounding_robust_inference.estimators.KCMCEstimator.predict_gic"]], "predict_policy() (dualkcmcpolicylearner method)": [[1, "confounding_robust_inference.estimators.DualKCMCPolicyLearner.predict_policy"]], "atepolicy (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.ATEPolicy"]], "basepolicy (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.BasePolicy"]], "gaussianpolicy (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.GaussianPolicy"]], "logisticpolicy (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.LogisticPolicy"]], "mixedpolicy (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.MixedPolicy"]], "onehotpolicy (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.OnehotPolicy"]], "policydifference (class in confounding_robust_inference.policies)": [[3, "confounding_robust_inference.policies.PolicyDifference"]], "confounding_robust_inference.policies": [[3, "module-confounding_robust_inference.policies"]], "prob() (atepolicy method)": [[3, "confounding_robust_inference.policies.ATEPolicy.prob"]], "prob() (basepolicy method)": [[3, "confounding_robust_inference.policies.BasePolicy.prob"]], "prob() (gaussianpolicy method)": [[3, "confounding_robust_inference.policies.GaussianPolicy.prob"]], "prob() (logisticpolicy method)": [[3, "confounding_robust_inference.policies.LogisticPolicy.prob"]], "prob() (mixedpolicy method)": [[3, "confounding_robust_inference.policies.MixedPolicy.prob"]], "prob() (onehotpolicy method)": [[3, "confounding_robust_inference.policies.OnehotPolicy.prob"]], "prob() (policydifference method)": [[3, "confounding_robust_inference.policies.PolicyDifference.prob"]], "sample() (atepolicy method)": [[3, "confounding_robust_inference.policies.ATEPolicy.sample"]], "sample() (basepolicy method)": [[3, "confounding_robust_inference.policies.BasePolicy.sample"]], "sample() (gaussianpolicy method)": [[3, "confounding_robust_inference.policies.GaussianPolicy.sample"]], "sample() (logisticpolicy method)": [[3, "confounding_robust_inference.policies.LogisticPolicy.sample"]], "sample() (mixedpolicy method)": [[3, "confounding_robust_inference.policies.MixedPolicy.sample"]], "sample() (onehotpolicy method)": [[3, "confounding_robust_inference.policies.OnehotPolicy.sample"]], "sample() (policydifference method)": [[3, "confounding_robust_inference.policies.PolicyDifference.sample"]], "torchquantileregressor (class in confounding_robust_inference.utils.quantile_regression)": [[4, "confounding_robust_inference.utils.quantile_regression.TorchQuantileRegressor"]], "confounding_robust_inference.utils": [[4, "module-confounding_robust_inference.utils"]], "confounding_robust_inference.utils.propensity": [[4, "module-confounding_robust_inference.utils.propensity"]], "confounding_robust_inference.utils.quantile_regression": [[4, "module-confounding_robust_inference.utils.quantile_regression"]], "confounding_robust_inference.utils.types": [[4, "module-confounding_robust_inference.utils.types"]], "estimate_p_t_binary() (in module confounding_robust_inference.utils.propensity)": [[4, "confounding_robust_inference.utils.propensity.estimate_p_t_binary"]], "estimate_p_t_bounded_continuous() (in module confounding_robust_inference.utils.propensity)": [[4, "confounding_robust_inference.utils.propensity.estimate_p_t_bounded_continuous"]], "estimate_p_t_continuous() (in module confounding_robust_inference.utils.propensity)": [[4, "confounding_robust_inference.utils.propensity.estimate_p_t_continuous"]], "get_default_torch_dtype() (in module confounding_robust_inference.utils.types)": [[4, "confounding_robust_inference.utils.types.get_default_torch_dtype"]], "set_default_torch_dtype() (in module confounding_robust_inference.utils.types)": [[4, "confounding_robust_inference.utils.types.set_default_torch_dtype"]]}})